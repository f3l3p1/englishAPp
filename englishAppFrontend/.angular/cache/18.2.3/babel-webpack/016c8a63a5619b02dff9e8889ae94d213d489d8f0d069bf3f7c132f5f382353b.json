{"ast":null,"code":"import _asyncToGenerator from \"/Users/user/Documents/Workspace/englishApp/englishAppFrontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// src/app/login/login.page.ts\nimport { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet LoginPage = class LoginPage {\n  constructor(navCtrl, authService) {\n    this.navCtrl = navCtrl;\n    this.authService = authService;\n    this.email = '';\n    this.password = '';\n    this.errorMessage = '';\n  }\n  ngOnInit() {\n    // Clear any previous user data when loading the login page\n    localStorage.removeItem('token');\n    localStorage.removeItem('currentUser');\n  }\n  login() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      _this.errorMessage = ''; // Clear any previous error message\n      try {\n        const isAuthenticated = yield _this.authService.login(_this.email, _this.password).toPromise();\n        if (isAuthenticated) {\n          _this.navCtrl.navigateForward('/home');\n        } else {\n          _this.errorMessage = 'Invalid credentials';\n          alert(_this.errorMessage);\n        }\n      } catch (error) {\n        _this.errorMessage = 'Login failed. Please try again.';\n        console.error('Login error:', error);\n      }\n    })();\n  }\n  forgotPassword() {\n    // Navigate to the recovery page\n    this.navCtrl.navigateForward('/recovery');\n  }\n  navigateToRegister() {\n    // Navigate to the register page\n    this.navCtrl.navigateForward('/register');\n  }\n};\nLoginPage = __decorate([Component({\n  selector: 'app-login',\n  templateUrl: './login.page.html',\n  styleUrls: ['./login.page.scss']\n})], LoginPage);\nexport { LoginPage };","map":{"version":3,"names":["Component","LoginPage","constructor","navCtrl","authService","email","password","errorMessage","ngOnInit","localStorage","removeItem","login","_this","_asyncToGenerator","isAuthenticated","toPromise","navigateForward","alert","error","console","forgotPassword","navigateToRegister","__decorate","selector","templateUrl","styleUrls"],"sources":["/Users/user/Documents/Workspace/englishApp/englishAppFrontend/src/app/login/login.page.ts"],"sourcesContent":["// src/app/login/login.page.ts\n\nimport { Component, OnInit } from '@angular/core';\nimport { NavController } from '@ionic/angular';\nimport { AuthService } from '../services/auth.service';  // Update the path and service name as per your Firebase service\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.page.html',\n  styleUrls: ['./login.page.scss'],\n})\nexport class LoginPage implements OnInit {\n  email: string = '';\n  password: string = '';\n  public errorMessage: string = '';\n\n  constructor(private navCtrl: NavController, private authService: AuthenticationService) {}\n\n  ngOnInit() {\n    // Clear any previous user data when loading the login page\n    localStorage.removeItem('token');\n    localStorage.removeItem('currentUser');\n  }\n\n  async login() {\n    this.errorMessage = ''; // Clear any previous error message\n\n    try {\n      const isAuthenticated = await this.authService.login(this.email, this.password).toPromise();\n      if (isAuthenticated) {\n        this.navCtrl.navigateForward('/home');\n      } else {\n        this.errorMessage = 'Invalid credentials';\n        alert(this.errorMessage);\n      }\n    } catch (error) {\n      this.errorMessage = 'Login failed. Please try again.';\n      console.error('Login error:', error);\n    }\n  }\n\n  forgotPassword() {\n    // Navigate to the recovery page\n    this.navCtrl.navigateForward('/recovery');\n  }\n\n  navigateToRegister() {\n    // Navigate to the register page\n    this.navCtrl.navigateForward('/register');\n  }\n}\n"],"mappings":";AAAA;;AAEA,SAASA,SAAS,QAAgB,eAAe;AAS1C,IAAMC,SAAS,GAAf,MAAMA,SAAS;EAKpBC,YAAoBC,OAAsB,EAAUC,WAAkC;IAAlE,KAAAD,OAAO,GAAPA,OAAO;IAAyB,KAAAC,WAAW,GAAXA,WAAW;IAJ/D,KAAAC,KAAK,GAAW,EAAE;IAClB,KAAAC,QAAQ,GAAW,EAAE;IACd,KAAAC,YAAY,GAAW,EAAE;EAEyD;EAEzFC,QAAQA,CAAA;IACN;IACAC,YAAY,CAACC,UAAU,CAAC,OAAO,CAAC;IAChCD,YAAY,CAACC,UAAU,CAAC,aAAa,CAAC;EACxC;EAEMC,KAAKA,CAAA;IAAA,IAAAC,KAAA;IAAA,OAAAC,iBAAA;MACTD,KAAI,CAACL,YAAY,GAAG,EAAE,CAAC,CAAC;MAExB,IAAI;QACF,MAAMO,eAAe,SAASF,KAAI,CAACR,WAAW,CAACO,KAAK,CAACC,KAAI,CAACP,KAAK,EAAEO,KAAI,CAACN,QAAQ,CAAC,CAACS,SAAS,EAAE;QAC3F,IAAID,eAAe,EAAE;UACnBF,KAAI,CAACT,OAAO,CAACa,eAAe,CAAC,OAAO,CAAC;QACvC,CAAC,MAAM;UACLJ,KAAI,CAACL,YAAY,GAAG,qBAAqB;UACzCU,KAAK,CAACL,KAAI,CAACL,YAAY,CAAC;QAC1B;MACF,CAAC,CAAC,OAAOW,KAAK,EAAE;QACdN,KAAI,CAACL,YAAY,GAAG,iCAAiC;QACrDY,OAAO,CAACD,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;MACtC;IAAC;EACH;EAEAE,cAAcA,CAAA;IACZ;IACA,IAAI,CAACjB,OAAO,CAACa,eAAe,CAAC,WAAW,CAAC;EAC3C;EAEAK,kBAAkBA,CAAA;IAChB;IACA,IAAI,CAAClB,OAAO,CAACa,eAAe,CAAC,WAAW,CAAC;EAC3C;CACD;AAvCYf,SAAS,GAAAqB,UAAA,EALrBtB,SAAS,CAAC;EACTuB,QAAQ,EAAE,WAAW;EACrBC,WAAW,EAAE,mBAAmB;EAChCC,SAAS,EAAE,CAAC,mBAAmB;CAChC,CAAC,C,EACWxB,SAAS,CAuCrB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}