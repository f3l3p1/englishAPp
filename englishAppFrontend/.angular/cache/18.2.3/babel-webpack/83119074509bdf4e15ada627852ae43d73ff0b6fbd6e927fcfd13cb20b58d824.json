{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet RegisterPage = class RegisterPage {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n    this.name = '';\n    this.username = '';\n    this.email = '';\n    this.password = '';\n    this.confirmPassword = '';\n  }\n  // Method to handle user registration\n  register(form) {\n    if (this.password !== this.confirmPassword) {\n      alert('Passwords do not match');\n      return;\n    }\n    this.authService.register(this.name, this.username, this.email, this.password).subscribe(result => {\n      if (result === true) {\n        alert('Registration successful! You can now log in.');\n        this.router.navigate(['/login']);\n      } else {\n        alert(result); // Show any error message\n      }\n    }, error => {\n      console.error('Registration error:', error);\n      alert('An error occurred during registration.');\n    });\n  }\n  // Method to navigate to the login page\n  navigateToLogin() {\n    this.router.navigate(['/login']);\n  }\n};\nRegisterPage = __decorate([Component({\n  selector: 'app-register',\n  templateUrl: './register.page.html',\n  styleUrls: ['./register.page.scss']\n})], RegisterPage);\nexport { RegisterPage };","map":{"version":3,"names":["Component","RegisterPage","constructor","authService","router","name","username","email","password","confirmPassword","register","form","alert","subscribe","result","navigate","error","console","navigateToLogin","__decorate","selector","templateUrl","styleUrls"],"sources":["/Users/user/Documents/Workspace/englishApp/englishAppFrontend/src/app/register/register.page.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { NgForm } from '@angular/forms';\nimport { AuthenticationService } from '../services/authentication.service';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.page.html',\n  styleUrls: ['./register.page.scss'],\n})\nexport class RegisterPage {\n  name: string = '';\n  username: string = '';\n  email: string = '';\n  password: string = '';\n  confirmPassword: string = '';\n\n  constructor(private authService: AuthenticationService, private router: Router) {}\n\n  // Method to handle user registration\n  register(form: NgForm) {\n    if (this.password !== this.confirmPassword) {\n      alert('Passwords do not match');\n      return;\n    }\n\n    this.authService.register(this.name, this.username, this.email, this.password)\n      .subscribe(\n        (result: boolean | string) => {\n          if (result === true) {\n            alert('Registration successful! You can now log in.');\n            this.router.navigate(['/login']);\n          } else {\n            alert(result); // Show any error message\n          }\n        },\n        (error: any) => {\n          console.error('Registration error:', error);\n          alert('An error occurred during registration.');\n        }\n      );\n  }\n\n  // Method to navigate to the login page\n  navigateToLogin() {\n    this.router.navigate(['/login']);\n  }\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AAUlC,IAAMC,YAAY,GAAlB,MAAMA,YAAY;EAOvBC,YAAoBC,WAAkC,EAAUC,MAAc;IAA1D,KAAAD,WAAW,GAAXA,WAAW;IAAiC,KAAAC,MAAM,GAANA,MAAM;IANtE,KAAAC,IAAI,GAAW,EAAE;IACjB,KAAAC,QAAQ,GAAW,EAAE;IACrB,KAAAC,KAAK,GAAW,EAAE;IAClB,KAAAC,QAAQ,GAAW,EAAE;IACrB,KAAAC,eAAe,GAAW,EAAE;EAEqD;EAEjF;EACAC,QAAQA,CAACC,IAAY;IACnB,IAAI,IAAI,CAACH,QAAQ,KAAK,IAAI,CAACC,eAAe,EAAE;MAC1CG,KAAK,CAAC,wBAAwB,CAAC;MAC/B;IACF;IAEA,IAAI,CAACT,WAAW,CAACO,QAAQ,CAAC,IAAI,CAACL,IAAI,EAAE,IAAI,CAACC,QAAQ,EAAE,IAAI,CAACC,KAAK,EAAE,IAAI,CAACC,QAAQ,CAAC,CAC3EK,SAAS,CACPC,MAAwB,IAAI;MAC3B,IAAIA,MAAM,KAAK,IAAI,EAAE;QACnBF,KAAK,CAAC,8CAA8C,CAAC;QACrD,IAAI,CAACR,MAAM,CAACW,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;MAClC,CAAC,MAAM;QACLH,KAAK,CAACE,MAAM,CAAC,CAAC,CAAC;MACjB;IACF,CAAC,EACAE,KAAU,IAAI;MACbC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;MAC3CJ,KAAK,CAAC,wCAAwC,CAAC;IACjD,CAAC,CACF;EACL;EAEA;EACAM,eAAeA,CAAA;IACb,IAAI,CAACd,MAAM,CAACW,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;EAClC;CACD;AArCYd,YAAY,GAAAkB,UAAA,EALxBnB,SAAS,CAAC;EACToB,QAAQ,EAAE,cAAc;EACxBC,WAAW,EAAE,sBAAsB;EACnCC,SAAS,EAAE,CAAC,sBAAsB;CACnC,CAAC,C,EACWrB,YAAY,CAqCxB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}