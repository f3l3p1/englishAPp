{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { environment } from '../../environments/environment';\nimport { throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport let AuthenticationService = /*#__PURE__*/(() => {\n  var _AuthenticationService;\n  class AuthenticationService {\n    constructor(http, router) {\n      this.http = http;\n      this.router = router;\n      this.apiUrl = environment.apiUrl; // Use environment variable for API URL\n    }\n    getHeaders() {\n      const token = localStorage.getItem('token');\n      return new HttpHeaders().set('Authorization', `Bearer ${token}`);\n    }\n    getCurrentUser() {\n      return this.http.get(`${this.apiUrl}/users/current`, {\n        headers: this.getHeaders()\n      }).pipe(catchError(error => {\n        console.error('Error fetching current user:', error);\n        return throwError(() => new Error('Failed to fetch current user.'));\n      }));\n    }\n    getUsers() {\n      return this.http.get(`${this.apiUrl}/users`, {\n        headers: this.getHeaders()\n      }).pipe(catchError(error => {\n        console.error('Error fetching users:', error);\n        return throwError(() => new Error('Failed to fetch users.'));\n      }));\n    }\n    getCurrentCourse() {\n      return this.http.get(`${this.apiUrl}/current-course`, {\n        headers: this.getHeaders()\n      }).pipe(catchError(error => {\n        console.error('Error fetching current course:', error);\n        return throwError(() => new Error('Failed to fetch current course.'));\n      }));\n    }\n    getPastSessions() {\n      return this.http.get(`${this.apiUrl}/past-sessions`, {\n        headers: this.getHeaders()\n      }).pipe(catchError(error => {\n        console.error('Error fetching past sessions:', error);\n        return throwError(() => new Error('Failed to fetch past sessions.'));\n      }));\n    }\n    login(email, password) {\n      return this.http.post(`${this.apiUrl}/users/login`, {\n        correo: email,\n        contrasena: password\n      }).pipe(map(response => {\n        if (response && response.token) {\n          localStorage.setItem('token', response.token);\n          localStorage.setItem('currentUser', JSON.stringify(response.user));\n          return true;\n        }\n        return false;\n      }), catchError(error => {\n        console.error('Login error', error);\n        return throwError(() => new Error('Login failed'));\n      }));\n    }\n    register(name, username, email, password) {\n      return this.http.post(`${this.apiUrl}/users`, {\n        nombre: name,\n        nombreUsuario: username,\n        correo: email,\n        contrasena: password\n      }).pipe(map(() => true), catchError(error => {\n        console.error('Registration error', error);\n        return throwError(() => {\n          var _error$error;\n          return ((_error$error = error.error) === null || _error$error === void 0 ? void 0 : _error$error.message) || 'Registration failed. Please try again.';\n        });\n      }));\n    }\n    updateUser(updatedUserData) {\n      const formData = new FormData();\n      formData.append('name', updatedUserData.name);\n      formData.append('username', updatedUserData.username);\n      formData.append('email', updatedUserData.email);\n      if (updatedUserData.profilePicture) {\n        formData.append('profilePicture', updatedUserData.profilePicture);\n      }\n      return this.http.put(`${this.apiUrl}/users/${updatedUserData.id}`, formData, {\n        headers: this.getHeaders()\n      }).pipe(catchError(error => {\n        console.error('Update user error', error);\n        return throwError(() => new Error('Error updating user'));\n      }));\n    }\n    sendRecoveryEmail(email) {\n      return this.http.post(`${this.apiUrl}/send-recovery-email`, {\n        correo: email\n      }, {\n        headers: this.getHeaders()\n      }).pipe(map(() => true), catchError(error => {\n        console.error('Error sending recovery email:', error);\n        return throwError(() => new Error('Failed to send recovery email'));\n      }));\n    }\n    logout() {\n      localStorage.removeItem('token');\n      localStorage.removeItem('currentUser');\n      this.router.navigate(['/login']);\n    }\n  }\n  _AuthenticationService = AuthenticationService;\n  _AuthenticationService.ɵfac = function AuthenticationService_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || _AuthenticationService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n  _AuthenticationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: _AuthenticationService,\n    factory: _AuthenticationService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthenticationService;\n})();","map":{"version":3,"names":["HttpHeaders","environment","throwError","catchError","map","AuthenticationService","_AuthenticationService","constructor","http","router","apiUrl","getHeaders","token","localStorage","getItem","set","getCurrentUser","get","headers","pipe","error","console","Error","getUsers","getCurrentCourse","getPastSessions","login","email","password","post","correo","contrasena","response","setItem","JSON","stringify","user","register","name","username","nombre","nombreUsuario","_error$error","message","updateUser","updatedUserData","formData","FormData","append","profilePicture","put","id","sendRecoveryEmail","logout","removeItem","navigate","i0","ɵɵinject","i1","HttpClient","i2","Router","factory","ɵfac","providedIn"],"sources":["/Users/user/Documents/Workspace/englishApp/englishAppFrontend/src/app/services/authentication.service.ts"],"sourcesContent":["// src/app/services/authentication.service.ts\n\nimport { Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse, HttpHeaders } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { environment } from '../../environments/environment';\nimport { User } from '../models/user.model';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthenticationService {\n  private apiUrl = environment.apiUrl; // Use environment variable for API URL\n\n  constructor(private http: HttpClient, private router: Router) {}\n\n  private getHeaders(): HttpHeaders {\n    const token = localStorage.getItem('token');\n    return new HttpHeaders().set('Authorization', `Bearer ${token}`);\n  }\n\n  getCurrentUser(): Observable<User | null> {\n    return this.http.get<User>(`${this.apiUrl}/users/current`, { headers: this.getHeaders() })\n      .pipe(\n        catchError((error: HttpErrorResponse) => {\n          console.error('Error fetching current user:', error);\n          return throwError(() => new Error('Failed to fetch current user.'));\n        })\n      );\n  }\n\n  getUsers(): Observable<User[]> {\n    return this.http.get<User[]>(`${this.apiUrl}/users`, { headers: this.getHeaders() })\n      .pipe(\n        catchError((error: HttpErrorResponse) => {\n          console.error('Error fetching users:', error);\n          return throwError(() => new Error('Failed to fetch users.'));\n        })\n      );\n  }\n\n  getCurrentCourse(): Observable<any> { // Add this method\n    return this.http.get<any>(`${this.apiUrl}/current-course`, { headers: this.getHeaders() })\n      .pipe(\n        catchError((error: HttpErrorResponse) => {\n          console.error('Error fetching current course:', error);\n          return throwError(() => new Error('Failed to fetch current course.'));\n        })\n      );\n  }\n\n  getPastSessions(): Observable<any[]> { // Add this method\n    return this.http.get<any[]>(`${this.apiUrl}/past-sessions`, { headers: this.getHeaders() })\n      .pipe(\n        catchError((error: HttpErrorResponse) => {\n          console.error('Error fetching past sessions:', error);\n          return throwError(() => new Error('Failed to fetch past sessions.'));\n        })\n      );\n  }\n\n  login(email: string, password: string): Observable<boolean> {\n    return this.http.post<{ token: string; user: User }>(\n      `${this.apiUrl}/users/login`,\n      { correo: email, contrasena: password }\n    ).pipe(\n      map(response => {\n        if (response && response.token) {\n          localStorage.setItem('token', response.token);\n          localStorage.setItem('currentUser', JSON.stringify(response.user));\n          return true;\n        }\n        return false;\n      }),\n      catchError((error: HttpErrorResponse) => {\n        console.error('Login error', error);\n        return throwError(() => new Error('Login failed'));\n      })\n    );\n  }\n\n  register(name: string, username: string, email: string, password: string): Observable<boolean | string> {\n    return this.http.post(`${this.apiUrl}/users`, {\n      nombre: name,\n      nombreUsuario: username,\n      correo: email,\n      contrasena: password\n    }).pipe(\n      map(() => true),\n      catchError((error: HttpErrorResponse) => {\n        console.error('Registration error', error);\n        return throwError(() => error.error?.message || 'Registration failed. Please try again.');\n      })\n    );\n  }\n\n  updateUser(updatedUserData: any): Observable<any> {\n    const formData = new FormData();\n    formData.append('name', updatedUserData.name);\n    formData.append('username', updatedUserData.username);\n    formData.append('email', updatedUserData.email);\n\n    if (updatedUserData.profilePicture) {\n      formData.append('profilePicture', updatedUserData.profilePicture);\n    }\n\n    return this.http.put(`${this.apiUrl}/users/${updatedUserData.id}`, formData, { headers: this.getHeaders() })\n      .pipe(\n        catchError((error: HttpErrorResponse) => {\n          console.error('Update user error', error);\n          return throwError(() => new Error('Error updating user'));\n        })\n      );\n  }\n\n  sendRecoveryEmail(email: string): Observable<boolean> {\n    return this.http.post(`${this.apiUrl}/send-recovery-email`, { correo: email }, { headers: this.getHeaders() })\n      .pipe(\n        map(() => true),\n        catchError((error: HttpErrorResponse) => {\n          console.error('Error sending recovery email:', error);\n          return throwError(() => new Error('Failed to send recovery email'));\n        })\n      );\n  }\n\n  logout(): void {\n    localStorage.removeItem('token');\n    localStorage.removeItem('currentUser');\n    this.router.navigate(['/login']);\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}