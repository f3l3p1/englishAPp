{"ast":null,"code":"import _defineProperty from \"/Users/user/Documents/Workspace/englishApp/englishAppFrontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { ɵgetAllInstancesOf as _getAllInstancesOf, ɵgetDefaultInstanceOf as _getDefaultInstanceOf, VERSION, ɵAngularFireSchedulers as _AngularFireSchedulers, ɵAppCheckInstances as _AppCheckInstances, ɵzoneWrap as _zoneWrap } from '@angular/fire';\nimport { timer, from } from 'rxjs';\nimport { concatMap, distinct } from 'rxjs/operators';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Optional, NgModule, makeEnvironmentProviders, NgZone, Injector } from '@angular/core';\nimport { FirebaseApp, FirebaseApps } from '@angular/fire/app';\nimport { registerVersion } from 'firebase/app';\nimport { authState as authState$1, user as user$1, idToken as idToken$1 } from 'rxfire/auth';\nimport { applyActionCode as applyActionCode$1, beforeAuthStateChanged as beforeAuthStateChanged$1, checkActionCode as checkActionCode$1, confirmPasswordReset as confirmPasswordReset$1, connectAuthEmulator as connectAuthEmulator$1, createUserWithEmailAndPassword as createUserWithEmailAndPassword$1, deleteUser as deleteUser$1, fetchSignInMethodsForEmail as fetchSignInMethodsForEmail$1, getAdditionalUserInfo as getAdditionalUserInfo$1, getAuth as getAuth$1, getIdToken as getIdToken$1, getIdTokenResult as getIdTokenResult$1, getMultiFactorResolver as getMultiFactorResolver$1, getRedirectResult as getRedirectResult$1, initializeAuth as initializeAuth$1, initializeRecaptchaConfig as initializeRecaptchaConfig$1, isSignInWithEmailLink as isSignInWithEmailLink$1, linkWithCredential as linkWithCredential$1, linkWithPhoneNumber as linkWithPhoneNumber$1, linkWithPopup as linkWithPopup$1, linkWithRedirect as linkWithRedirect$1, multiFactor as multiFactor$1, onAuthStateChanged as onAuthStateChanged$1, onIdTokenChanged as onIdTokenChanged$1, parseActionCodeURL as parseActionCodeURL$1, reauthenticateWithCredential as reauthenticateWithCredential$1, reauthenticateWithPhoneNumber as reauthenticateWithPhoneNumber$1, reauthenticateWithPopup as reauthenticateWithPopup$1, reauthenticateWithRedirect as reauthenticateWithRedirect$1, reload as reload$1, revokeAccessToken as revokeAccessToken$1, sendEmailVerification as sendEmailVerification$1, sendPasswordResetEmail as sendPasswordResetEmail$1, sendSignInLinkToEmail as sendSignInLinkToEmail$1, setPersistence as setPersistence$1, signInAnonymously as signInAnonymously$1, signInWithCredential as signInWithCredential$1, signInWithCustomToken as signInWithCustomToken$1, signInWithEmailAndPassword as signInWithEmailAndPassword$1, signInWithEmailLink as signInWithEmailLink$1, signInWithPhoneNumber as signInWithPhoneNumber$1, signInWithPopup as signInWithPopup$1, signInWithRedirect as signInWithRedirect$1, signOut as signOut$1, unlink as unlink$1, updateCurrentUser as updateCurrentUser$1, updateEmail as updateEmail$1, updatePassword as updatePassword$1, updatePhoneNumber as updatePhoneNumber$1, updateProfile as updateProfile$1, useDeviceLanguage as useDeviceLanguage$1, validatePassword as validatePassword$1, verifyBeforeUpdateEmail as verifyBeforeUpdateEmail$1, verifyPasswordResetCode as verifyPasswordResetCode$1 } from 'firebase/auth';\nexport * from 'firebase/auth';\nconst AUTH_PROVIDER_NAME = 'auth';\nclass Auth {\n  constructor(auth) {\n    return auth;\n  }\n}\nclass AuthInstances {\n  constructor() {\n    return _getAllInstancesOf(AUTH_PROVIDER_NAME);\n  }\n}\nconst authInstance$ = /*#__PURE__*/ /*#__PURE__*/timer(0, 300).pipe( /*#__PURE__*/concatMap(() => from(_getAllInstancesOf(AUTH_PROVIDER_NAME))), /*#__PURE__*/distinct());\nconst PROVIDED_AUTH_INSTANCES = /*#__PURE__*/new InjectionToken('angularfire2.auth-instances');\nfunction defaultAuthInstanceFactory(provided, defaultApp) {\n  const defaultAuth = _getDefaultInstanceOf(AUTH_PROVIDER_NAME, provided, defaultApp);\n  return defaultAuth && new Auth(defaultAuth);\n}\nfunction authInstanceFactory(fn) {\n  return (zone, injector) => {\n    const auth = zone.runOutsideAngular(() => fn(injector));\n    return new Auth(auth);\n  };\n}\nconst AUTH_INSTANCES_PROVIDER = {\n  provide: AuthInstances,\n  deps: [[/*#__PURE__*/new Optional(), PROVIDED_AUTH_INSTANCES]]\n};\nconst DEFAULT_AUTH_INSTANCE_PROVIDER = {\n  provide: Auth,\n  useFactory: defaultAuthInstanceFactory,\n  deps: [[/*#__PURE__*/new Optional(), PROVIDED_AUTH_INSTANCES], FirebaseApp]\n};\nlet AuthModule = /*#__PURE__*/(() => {\n  var _AuthModule;\n  class AuthModule {\n    constructor() {\n      registerVersion('angularfire', VERSION.full, 'auth');\n    }\n  }\n  _AuthModule = AuthModule;\n  _defineProperty(AuthModule, \"\\u0275fac\", function _AuthModule_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || _AuthModule)();\n  });\n  _defineProperty(AuthModule, \"\\u0275mod\", /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: _AuthModule\n  }));\n  _defineProperty(AuthModule, \"\\u0275inj\", /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [DEFAULT_AUTH_INSTANCE_PROVIDER, AUTH_INSTANCES_PROVIDER]\n  }));\n  return AuthModule;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nfunction provideAuth(fn, ...deps) {\n  registerVersion('angularfire', VERSION.full, 'auth');\n  return makeEnvironmentProviders([DEFAULT_AUTH_INSTANCE_PROVIDER, AUTH_INSTANCES_PROVIDER, {\n    provide: PROVIDED_AUTH_INSTANCES,\n    useFactory: authInstanceFactory(fn),\n    multi: true,\n    deps: [NgZone, Injector, _AngularFireSchedulers, FirebaseApps, [new Optional(), _AppCheckInstances], ...deps]\n  }]);\n}\n\n// DO NOT MODIFY, this file is autogenerated by tools/build.ts\nconst authState = /*#__PURE__*/_zoneWrap(authState$1, true);\nconst user = /*#__PURE__*/_zoneWrap(user$1, true);\nconst idToken = /*#__PURE__*/_zoneWrap(idToken$1, true);\n\n// DO NOT MODIFY, this file is autogenerated by tools/build.ts\nconst applyActionCode = /*#__PURE__*/_zoneWrap(applyActionCode$1, true);\nconst beforeAuthStateChanged = /*#__PURE__*/_zoneWrap(beforeAuthStateChanged$1, true);\nconst checkActionCode = /*#__PURE__*/_zoneWrap(checkActionCode$1, true);\nconst confirmPasswordReset = /*#__PURE__*/_zoneWrap(confirmPasswordReset$1, true);\nconst connectAuthEmulator = /*#__PURE__*/_zoneWrap(connectAuthEmulator$1, true);\nconst createUserWithEmailAndPassword = /*#__PURE__*/_zoneWrap(createUserWithEmailAndPassword$1, true);\nconst deleteUser = /*#__PURE__*/_zoneWrap(deleteUser$1, true);\nconst fetchSignInMethodsForEmail = /*#__PURE__*/_zoneWrap(fetchSignInMethodsForEmail$1, true);\nconst getAdditionalUserInfo = /*#__PURE__*/_zoneWrap(getAdditionalUserInfo$1, true);\nconst getAuth = /*#__PURE__*/_zoneWrap(getAuth$1, true);\nconst getIdToken = /*#__PURE__*/_zoneWrap(getIdToken$1, true);\nconst getIdTokenResult = /*#__PURE__*/_zoneWrap(getIdTokenResult$1, true);\nconst getMultiFactorResolver = /*#__PURE__*/_zoneWrap(getMultiFactorResolver$1, true);\nconst getRedirectResult = /*#__PURE__*/_zoneWrap(getRedirectResult$1, true);\nconst initializeAuth = /*#__PURE__*/_zoneWrap(initializeAuth$1, true);\nconst initializeRecaptchaConfig = /*#__PURE__*/_zoneWrap(initializeRecaptchaConfig$1, true);\nconst isSignInWithEmailLink = /*#__PURE__*/_zoneWrap(isSignInWithEmailLink$1, true);\nconst linkWithCredential = /*#__PURE__*/_zoneWrap(linkWithCredential$1, true);\nconst linkWithPhoneNumber = /*#__PURE__*/_zoneWrap(linkWithPhoneNumber$1, true);\nconst linkWithPopup = /*#__PURE__*/_zoneWrap(linkWithPopup$1, true);\nconst linkWithRedirect = /*#__PURE__*/_zoneWrap(linkWithRedirect$1, true);\nconst multiFactor = /*#__PURE__*/_zoneWrap(multiFactor$1, true);\nconst onAuthStateChanged = /*#__PURE__*/_zoneWrap(onAuthStateChanged$1, true);\nconst onIdTokenChanged = /*#__PURE__*/_zoneWrap(onIdTokenChanged$1, true);\nconst parseActionCodeURL = /*#__PURE__*/_zoneWrap(parseActionCodeURL$1, true);\nconst reauthenticateWithCredential = /*#__PURE__*/_zoneWrap(reauthenticateWithCredential$1, true);\nconst reauthenticateWithPhoneNumber = /*#__PURE__*/_zoneWrap(reauthenticateWithPhoneNumber$1, true);\nconst reauthenticateWithPopup = /*#__PURE__*/_zoneWrap(reauthenticateWithPopup$1, true);\nconst reauthenticateWithRedirect = /*#__PURE__*/_zoneWrap(reauthenticateWithRedirect$1, true);\nconst reload = /*#__PURE__*/_zoneWrap(reload$1, true);\nconst revokeAccessToken = /*#__PURE__*/_zoneWrap(revokeAccessToken$1, true);\nconst sendEmailVerification = /*#__PURE__*/_zoneWrap(sendEmailVerification$1, true);\nconst sendPasswordResetEmail = /*#__PURE__*/_zoneWrap(sendPasswordResetEmail$1, true);\nconst sendSignInLinkToEmail = /*#__PURE__*/_zoneWrap(sendSignInLinkToEmail$1, true);\nconst setPersistence = /*#__PURE__*/_zoneWrap(setPersistence$1, true);\nconst signInAnonymously = /*#__PURE__*/_zoneWrap(signInAnonymously$1, true);\nconst signInWithCredential = /*#__PURE__*/_zoneWrap(signInWithCredential$1, true);\nconst signInWithCustomToken = /*#__PURE__*/_zoneWrap(signInWithCustomToken$1, true);\nconst signInWithEmailAndPassword = /*#__PURE__*/_zoneWrap(signInWithEmailAndPassword$1, true);\nconst signInWithEmailLink = /*#__PURE__*/_zoneWrap(signInWithEmailLink$1, true);\nconst signInWithPhoneNumber = /*#__PURE__*/_zoneWrap(signInWithPhoneNumber$1, true);\nconst signInWithPopup = /*#__PURE__*/_zoneWrap(signInWithPopup$1, true);\nconst signInWithRedirect = /*#__PURE__*/_zoneWrap(signInWithRedirect$1, true);\nconst signOut = /*#__PURE__*/_zoneWrap(signOut$1, true);\nconst unlink = /*#__PURE__*/_zoneWrap(unlink$1, true);\nconst updateCurrentUser = /*#__PURE__*/_zoneWrap(updateCurrentUser$1, true);\nconst updateEmail = /*#__PURE__*/_zoneWrap(updateEmail$1, true);\nconst updatePassword = /*#__PURE__*/_zoneWrap(updatePassword$1, true);\nconst updatePhoneNumber = /*#__PURE__*/_zoneWrap(updatePhoneNumber$1, true);\nconst updateProfile = /*#__PURE__*/_zoneWrap(updateProfile$1, true);\nconst useDeviceLanguage = /*#__PURE__*/_zoneWrap(useDeviceLanguage$1, true);\nconst validatePassword = /*#__PURE__*/_zoneWrap(validatePassword$1, true);\nconst verifyBeforeUpdateEmail = /*#__PURE__*/_zoneWrap(verifyBeforeUpdateEmail$1, true);\nconst verifyPasswordResetCode = /*#__PURE__*/_zoneWrap(verifyPasswordResetCode$1, true);\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Auth, AuthInstances, AuthModule, applyActionCode, authInstance$, authState, beforeAuthStateChanged, checkActionCode, confirmPasswordReset, connectAuthEmulator, createUserWithEmailAndPassword, deleteUser, fetchSignInMethodsForEmail, getAdditionalUserInfo, getAuth, getIdToken, getIdTokenResult, getMultiFactorResolver, getRedirectResult, idToken, initializeAuth, initializeRecaptchaConfig, isSignInWithEmailLink, linkWithCredential, linkWithPhoneNumber, linkWithPopup, linkWithRedirect, multiFactor, onAuthStateChanged, onIdTokenChanged, parseActionCodeURL, provideAuth, reauthenticateWithCredential, reauthenticateWithPhoneNumber, reauthenticateWithPopup, reauthenticateWithRedirect, reload, revokeAccessToken, sendEmailVerification, sendPasswordResetEmail, sendSignInLinkToEmail, setPersistence, signInAnonymously, signInWithCredential, signInWithCustomToken, signInWithEmailAndPassword, signInWithEmailLink, signInWithPhoneNumber, signInWithPopup, signInWithRedirect, signOut, unlink, updateCurrentUser, updateEmail, updatePassword, updatePhoneNumber, updateProfile, useDeviceLanguage, user, validatePassword, verifyBeforeUpdateEmail, verifyPasswordResetCode };","map":{"version":3,"names":["ɵgetAllInstancesOf","_getAllInstancesOf","ɵgetDefaultInstanceOf","_getDefaultInstanceOf","VERSION","ɵAngularFireSchedulers","_AngularFireSchedulers","ɵAppCheckInstances","_AppCheckInstances","ɵzoneWrap","_zoneWrap","timer","from","concatMap","distinct","i0","InjectionToken","Optional","NgModule","makeEnvironmentProviders","NgZone","Injector","FirebaseApp","FirebaseApps","registerVersion","authState","authState$1","user","user$1","idToken","idToken$1","applyActionCode","applyActionCode$1","beforeAuthStateChanged","beforeAuthStateChanged$1","checkActionCode","checkActionCode$1","confirmPasswordReset","confirmPasswordReset$1","connectAuthEmulator","connectAuthEmulator$1","createUserWithEmailAndPassword","createUserWithEmailAndPassword$1","deleteUser","deleteUser$1","fetchSignInMethodsForEmail","fetchSignInMethodsForEmail$1","getAdditionalUserInfo","getAdditionalUserInfo$1","getAuth","getAuth$1","getIdToken","getIdToken$1","getIdTokenResult","getIdTokenResult$1","getMultiFactorResolver","getMultiFactorResolver$1","getRedirectResult","getRedirectResult$1","initializeAuth","initializeAuth$1","initializeRecaptchaConfig","initializeRecaptchaConfig$1","isSignInWithEmailLink","isSignInWithEmailLink$1","linkWithCredential","linkWithCredential$1","linkWithPhoneNumber","linkWithPhoneNumber$1","linkWithPopup","linkWithPopup$1","linkWithRedirect","linkWithRedirect$1","multiFactor","multiFactor$1","onAuthStateChanged","onAuthStateChanged$1","onIdTokenChanged","onIdTokenChanged$1","parseActionCodeURL","parseActionCodeURL$1","reauthenticateWithCredential","reauthenticateWithCredential$1","reauthenticateWithPhoneNumber","reauthenticateWithPhoneNumber$1","reauthenticateWithPopup","reauthenticateWithPopup$1","reauthenticateWithRedirect","reauthenticateWithRedirect$1","reload","reload$1","revokeAccessToken","revokeAccessToken$1","sendEmailVerification","sendEmailVerification$1","sendPasswordResetEmail","sendPasswordResetEmail$1","sendSignInLinkToEmail","sendSignInLinkToEmail$1","setPersistence","setPersistence$1","signInAnonymously","signInAnonymously$1","signInWithCredential","signInWithCredential$1","signInWithCustomToken","signInWithCustomToken$1","signInWithEmailAndPassword","signInWithEmailAndPassword$1","signInWithEmailLink","signInWithEmailLink$1","signInWithPhoneNumber","signInWithPhoneNumber$1","signInWithPopup","signInWithPopup$1","signInWithRedirect","signInWithRedirect$1","signOut","signOut$1","unlink","unlink$1","updateCurrentUser","updateCurrentUser$1","updateEmail","updateEmail$1","updatePassword","updatePassword$1","updatePhoneNumber","updatePhoneNumber$1","updateProfile","updateProfile$1","useDeviceLanguage","useDeviceLanguage$1","validatePassword","validatePassword$1","verifyBeforeUpdateEmail","verifyBeforeUpdateEmail$1","verifyPasswordResetCode","verifyPasswordResetCode$1","AUTH_PROVIDER_NAME","Auth","constructor","auth","AuthInstances","authInstance$","pipe","PROVIDED_AUTH_INSTANCES","defaultAuthInstanceFactory","provided","defaultApp","defaultAuth","authInstanceFactory","fn","zone","injector","runOutsideAngular","AUTH_INSTANCES_PROVIDER","provide","deps","DEFAULT_AUTH_INSTANCE_PROVIDER","useFactory","AuthModule","_AuthModule","full","_defineProperty","_AuthModule_Factory","__ngFactoryType__","ɵɵdefineNgModule","type","ɵɵdefineInjector","providers","ngDevMode","provideAuth","multi"],"sources":["/Users/user/Documents/Workspace/englishApp/englishAppFrontend/node_modules/@angular/fire/fesm2022/angular-fire-auth.mjs"],"sourcesContent":["import { ɵgetAllInstancesOf as _getAllInstancesOf, ɵgetDefaultInstanceOf as _getDefaultInstanceOf, VERSION, ɵAngularFireSchedulers as _AngularFireSchedulers, ɵAppCheckInstances as _AppCheckInstances, ɵzoneWrap as _zoneWrap } from '@angular/fire';\nimport { timer, from } from 'rxjs';\nimport { concatMap, distinct } from 'rxjs/operators';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Optional, NgModule, makeEnvironmentProviders, NgZone, Injector } from '@angular/core';\nimport { FirebaseApp, FirebaseApps } from '@angular/fire/app';\nimport { registerVersion } from 'firebase/app';\nimport { authState as authState$1, user as user$1, idToken as idToken$1 } from 'rxfire/auth';\nimport { applyActionCode as applyActionCode$1, beforeAuthStateChanged as beforeAuthStateChanged$1, checkActionCode as checkActionCode$1, confirmPasswordReset as confirmPasswordReset$1, connectAuthEmulator as connectAuthEmulator$1, createUserWithEmailAndPassword as createUserWithEmailAndPassword$1, deleteUser as deleteUser$1, fetchSignInMethodsForEmail as fetchSignInMethodsForEmail$1, getAdditionalUserInfo as getAdditionalUserInfo$1, getAuth as getAuth$1, getIdToken as getIdToken$1, getIdTokenResult as getIdTokenResult$1, getMultiFactorResolver as getMultiFactorResolver$1, getRedirectResult as getRedirectResult$1, initializeAuth as initializeAuth$1, initializeRecaptchaConfig as initializeRecaptchaConfig$1, isSignInWithEmailLink as isSignInWithEmailLink$1, linkWithCredential as linkWithCredential$1, linkWithPhoneNumber as linkWithPhoneNumber$1, linkWithPopup as linkWithPopup$1, linkWithRedirect as linkWithRedirect$1, multiFactor as multiFactor$1, onAuthStateChanged as onAuthStateChanged$1, onIdTokenChanged as onIdTokenChanged$1, parseActionCodeURL as parseActionCodeURL$1, reauthenticateWithCredential as reauthenticateWithCredential$1, reauthenticateWithPhoneNumber as reauthenticateWithPhoneNumber$1, reauthenticateWithPopup as reauthenticateWithPopup$1, reauthenticateWithRedirect as reauthenticateWithRedirect$1, reload as reload$1, revokeAccessToken as revokeAccessToken$1, sendEmailVerification as sendEmailVerification$1, sendPasswordResetEmail as sendPasswordResetEmail$1, sendSignInLinkToEmail as sendSignInLinkToEmail$1, setPersistence as setPersistence$1, signInAnonymously as signInAnonymously$1, signInWithCredential as signInWithCredential$1, signInWithCustomToken as signInWithCustomToken$1, signInWithEmailAndPassword as signInWithEmailAndPassword$1, signInWithEmailLink as signInWithEmailLink$1, signInWithPhoneNumber as signInWithPhoneNumber$1, signInWithPopup as signInWithPopup$1, signInWithRedirect as signInWithRedirect$1, signOut as signOut$1, unlink as unlink$1, updateCurrentUser as updateCurrentUser$1, updateEmail as updateEmail$1, updatePassword as updatePassword$1, updatePhoneNumber as updatePhoneNumber$1, updateProfile as updateProfile$1, useDeviceLanguage as useDeviceLanguage$1, validatePassword as validatePassword$1, verifyBeforeUpdateEmail as verifyBeforeUpdateEmail$1, verifyPasswordResetCode as verifyPasswordResetCode$1 } from 'firebase/auth';\nexport * from 'firebase/auth';\n\nconst AUTH_PROVIDER_NAME = 'auth';\nclass Auth {\n    constructor(auth) {\n        return auth;\n    }\n}\nclass AuthInstances {\n    constructor() {\n        return _getAllInstancesOf(AUTH_PROVIDER_NAME);\n    }\n}\nconst authInstance$ = timer(0, 300).pipe(concatMap(() => from(_getAllInstancesOf(AUTH_PROVIDER_NAME))), distinct());\n\nconst PROVIDED_AUTH_INSTANCES = new InjectionToken('angularfire2.auth-instances');\nfunction defaultAuthInstanceFactory(provided, defaultApp) {\n    const defaultAuth = _getDefaultInstanceOf(AUTH_PROVIDER_NAME, provided, defaultApp);\n    return defaultAuth && new Auth(defaultAuth);\n}\nfunction authInstanceFactory(fn) {\n    return (zone, injector) => {\n        const auth = zone.runOutsideAngular(() => fn(injector));\n        return new Auth(auth);\n    };\n}\nconst AUTH_INSTANCES_PROVIDER = {\n    provide: AuthInstances,\n    deps: [\n        [new Optional(), PROVIDED_AUTH_INSTANCES],\n    ]\n};\nconst DEFAULT_AUTH_INSTANCE_PROVIDER = {\n    provide: Auth,\n    useFactory: defaultAuthInstanceFactory,\n    deps: [\n        [new Optional(), PROVIDED_AUTH_INSTANCES],\n        FirebaseApp,\n    ]\n};\nclass AuthModule {\n    constructor() {\n        registerVersion('angularfire', VERSION.full, 'auth');\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: AuthModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"18.0.0\", ngImport: i0, type: AuthModule });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: AuthModule, providers: [\n            DEFAULT_AUTH_INSTANCE_PROVIDER,\n            AUTH_INSTANCES_PROVIDER,\n        ] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: AuthModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    providers: [\n                        DEFAULT_AUTH_INSTANCE_PROVIDER,\n                        AUTH_INSTANCES_PROVIDER,\n                    ]\n                }]\n        }], ctorParameters: () => [] });\nfunction provideAuth(fn, ...deps) {\n    registerVersion('angularfire', VERSION.full, 'auth');\n    return makeEnvironmentProviders([\n        DEFAULT_AUTH_INSTANCE_PROVIDER,\n        AUTH_INSTANCES_PROVIDER,\n        {\n            provide: PROVIDED_AUTH_INSTANCES,\n            useFactory: authInstanceFactory(fn),\n            multi: true,\n            deps: [\n                NgZone,\n                Injector,\n                _AngularFireSchedulers,\n                FirebaseApps,\n                [new Optional(), _AppCheckInstances],\n                ...deps,\n            ]\n        }\n    ]);\n}\n\n// DO NOT MODIFY, this file is autogenerated by tools/build.ts\nconst authState = _zoneWrap(authState$1, true);\nconst user = _zoneWrap(user$1, true);\nconst idToken = _zoneWrap(idToken$1, true);\n\n// DO NOT MODIFY, this file is autogenerated by tools/build.ts\nconst applyActionCode = _zoneWrap(applyActionCode$1, true);\nconst beforeAuthStateChanged = _zoneWrap(beforeAuthStateChanged$1, true);\nconst checkActionCode = _zoneWrap(checkActionCode$1, true);\nconst confirmPasswordReset = _zoneWrap(confirmPasswordReset$1, true);\nconst connectAuthEmulator = _zoneWrap(connectAuthEmulator$1, true);\nconst createUserWithEmailAndPassword = _zoneWrap(createUserWithEmailAndPassword$1, true);\nconst deleteUser = _zoneWrap(deleteUser$1, true);\nconst fetchSignInMethodsForEmail = _zoneWrap(fetchSignInMethodsForEmail$1, true);\nconst getAdditionalUserInfo = _zoneWrap(getAdditionalUserInfo$1, true);\nconst getAuth = _zoneWrap(getAuth$1, true);\nconst getIdToken = _zoneWrap(getIdToken$1, true);\nconst getIdTokenResult = _zoneWrap(getIdTokenResult$1, true);\nconst getMultiFactorResolver = _zoneWrap(getMultiFactorResolver$1, true);\nconst getRedirectResult = _zoneWrap(getRedirectResult$1, true);\nconst initializeAuth = _zoneWrap(initializeAuth$1, true);\nconst initializeRecaptchaConfig = _zoneWrap(initializeRecaptchaConfig$1, true);\nconst isSignInWithEmailLink = _zoneWrap(isSignInWithEmailLink$1, true);\nconst linkWithCredential = _zoneWrap(linkWithCredential$1, true);\nconst linkWithPhoneNumber = _zoneWrap(linkWithPhoneNumber$1, true);\nconst linkWithPopup = _zoneWrap(linkWithPopup$1, true);\nconst linkWithRedirect = _zoneWrap(linkWithRedirect$1, true);\nconst multiFactor = _zoneWrap(multiFactor$1, true);\nconst onAuthStateChanged = _zoneWrap(onAuthStateChanged$1, true);\nconst onIdTokenChanged = _zoneWrap(onIdTokenChanged$1, true);\nconst parseActionCodeURL = _zoneWrap(parseActionCodeURL$1, true);\nconst reauthenticateWithCredential = _zoneWrap(reauthenticateWithCredential$1, true);\nconst reauthenticateWithPhoneNumber = _zoneWrap(reauthenticateWithPhoneNumber$1, true);\nconst reauthenticateWithPopup = _zoneWrap(reauthenticateWithPopup$1, true);\nconst reauthenticateWithRedirect = _zoneWrap(reauthenticateWithRedirect$1, true);\nconst reload = _zoneWrap(reload$1, true);\nconst revokeAccessToken = _zoneWrap(revokeAccessToken$1, true);\nconst sendEmailVerification = _zoneWrap(sendEmailVerification$1, true);\nconst sendPasswordResetEmail = _zoneWrap(sendPasswordResetEmail$1, true);\nconst sendSignInLinkToEmail = _zoneWrap(sendSignInLinkToEmail$1, true);\nconst setPersistence = _zoneWrap(setPersistence$1, true);\nconst signInAnonymously = _zoneWrap(signInAnonymously$1, true);\nconst signInWithCredential = _zoneWrap(signInWithCredential$1, true);\nconst signInWithCustomToken = _zoneWrap(signInWithCustomToken$1, true);\nconst signInWithEmailAndPassword = _zoneWrap(signInWithEmailAndPassword$1, true);\nconst signInWithEmailLink = _zoneWrap(signInWithEmailLink$1, true);\nconst signInWithPhoneNumber = _zoneWrap(signInWithPhoneNumber$1, true);\nconst signInWithPopup = _zoneWrap(signInWithPopup$1, true);\nconst signInWithRedirect = _zoneWrap(signInWithRedirect$1, true);\nconst signOut = _zoneWrap(signOut$1, true);\nconst unlink = _zoneWrap(unlink$1, true);\nconst updateCurrentUser = _zoneWrap(updateCurrentUser$1, true);\nconst updateEmail = _zoneWrap(updateEmail$1, true);\nconst updatePassword = _zoneWrap(updatePassword$1, true);\nconst updatePhoneNumber = _zoneWrap(updatePhoneNumber$1, true);\nconst updateProfile = _zoneWrap(updateProfile$1, true);\nconst useDeviceLanguage = _zoneWrap(useDeviceLanguage$1, true);\nconst validatePassword = _zoneWrap(validatePassword$1, true);\nconst verifyBeforeUpdateEmail = _zoneWrap(verifyBeforeUpdateEmail$1, true);\nconst verifyPasswordResetCode = _zoneWrap(verifyPasswordResetCode$1, true);\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Auth, AuthInstances, AuthModule, applyActionCode, authInstance$, authState, beforeAuthStateChanged, checkActionCode, confirmPasswordReset, connectAuthEmulator, createUserWithEmailAndPassword, deleteUser, fetchSignInMethodsForEmail, getAdditionalUserInfo, getAuth, getIdToken, getIdTokenResult, getMultiFactorResolver, getRedirectResult, idToken, initializeAuth, initializeRecaptchaConfig, isSignInWithEmailLink, linkWithCredential, linkWithPhoneNumber, linkWithPopup, linkWithRedirect, multiFactor, onAuthStateChanged, onIdTokenChanged, parseActionCodeURL, provideAuth, reauthenticateWithCredential, reauthenticateWithPhoneNumber, reauthenticateWithPopup, reauthenticateWithRedirect, reload, revokeAccessToken, sendEmailVerification, sendPasswordResetEmail, sendSignInLinkToEmail, setPersistence, signInAnonymously, signInWithCredential, signInWithCustomToken, signInWithEmailAndPassword, signInWithEmailLink, signInWithPhoneNumber, signInWithPopup, signInWithRedirect, signOut, unlink, updateCurrentUser, updateEmail, updatePassword, updatePhoneNumber, updateProfile, useDeviceLanguage, user, validatePassword, verifyBeforeUpdateEmail, verifyPasswordResetCode };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}