"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const tasks_1 = require("@angular-devkit/schematics/tasks");
const util_1 = require("../utility/util");
const dependencies_1 = require("../utility/dependencies");
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
const schematics_core_1 = require("@schuchard/schematics-core");
function default_1(options) {
    return (tree, context) => {
        options = Object.assign(Object.assign({}, options), { __version__: util_1.getAngularVersion(tree) });
        return schematics_1.chain([
            updateDependencies(),
            removeFiles(),
            updateAngularJson(),
            addRootFiles(),
            addWorkspaceFiles(),
            configureTsConfig(),
        ])(tree, context);
    };
}
exports.default = default_1;
function updateDependencies() {
    return (tree, context) => {
        context.logger.debug('Updating dependencies...');
        context.addTask(new tasks_1.NodePackageInstallTask());
        const removeDependencies = rxjs_1.of('@types/jasmine', 'jasmine-core', 'karma-chrome-launcher', 'karma-coverage-istanbul-reporter', 'karma-coverage', 'karma-jasmine-html-reporter', 'karma-jasmine', 'karma').pipe(operators_1.map((packageName) => {
            context.logger.debug(`Removing ${packageName} dependency`);
            util_1.removePackageJsonDependency(tree, {
                type: dependencies_1.NodeDependencyType.Dev,
                name: packageName,
            });
            return tree;
        }));
        const addDependencies = rxjs_1.of(['jest', '28'], ['@types/jest'], ['@angular-builders/jest']).pipe(operators_1.concatMap((dependency) => util_1.getLatestNodeVersion(dependency)), operators_1.map((packageFromRegistry) => {
            const { name, version } = packageFromRegistry;
            context.logger.debug(`Adding ${name}:${version} to ${dependencies_1.NodeDependencyType.Dev}`);
            dependencies_1.addPackageJsonDependency(tree, {
                type: dependencies_1.NodeDependencyType.Dev,
                name,
                version,
            });
            return tree;
        }));
        return rxjs_1.concat(removeDependencies, addDependencies);
    };
}
function removeFiles() {
    return (tree, context) => {
        var _a, _b;
        const angularProjects = Object.values((_b = (_a = schematics_core_1.getWorkspaceConfig(tree)) === null || _a === void 0 ? void 0 : _a.projects) !== null && _b !== void 0 ? _b : {}).map((o) => o.root);
        const deleteFiles = [
            'src/karma.conf.js',
            'karma.conf.js',
            // unable to overwrite these with the url() approach.
            'jest.config.js',
            'src/setup-jest.ts',
            'src/test-config.helper.ts',
        ];
        const projects = angularProjects.map((root) => deleteFiles.map((deletePath) => `${root}/${deletePath}`));
        projects.forEach((paths) => {
            paths.forEach((path) => {
                context.logger.debug(`removing ${path}`);
                util_1.safeFileDelete(tree, path);
            });
        });
        return tree;
    };
}
function updateAngularJson() {
    return (tree) => {
        const angularJson = schematics_core_1.getWorkspaceConfig(tree);
        Object.values(angularJson.projects).forEach((o) => {
            const { test } = o === null || o === void 0 ? void 0 : o.architect;
            if (test === null || test === void 0 ? void 0 : test.builder) {
                test.builder = '@angular-builders/jest:run';
                delete test.options.main;
                delete test.options.polyfills;
                delete test.options.inlineStyleLanguage;
                delete test.options.karmaConfig;
            }
        });
        // todo use project formatter or an ast update strategy to avoid formatting irrelevant fields
        tree.overwrite('angular.json', JSON.stringify(angularJson, null, 2));
        return tree;
    };
}
function addRootFiles() {
    return (tree, context) => {
        context.logger.debug('adding jest files to host dir');
        return schematics_1.chain([schematics_1.mergeWith(schematics_1.apply(schematics_1.url('./files'), [schematics_1.move('./')]))])(tree, context);
    };
}
function addWorkspaceFiles() {
    return (tree, context) => {
        context.logger.debug('adding jest files to workspace projects');
        const { projects } = schematics_core_1.getWorkspaceConfig(tree);
        if (!projects || !Object.keys(projects).length) {
            return tree;
        }
        const paths = Object.values(projects)
            .map((proj) => proj === null || proj === void 0 ? void 0 : proj.root)
            .filter((path) => !!path)
            .map((path) => schematics_1.mergeWith(schematics_1.apply(schematics_1.url('./workspace-files'), [schematics_1.template({ path }), schematics_1.move(path)])));
        return schematics_1.chain(paths)(tree, context);
    };
}
function configureTsConfig() {
    return (tree) => {
        const angularJson = schematics_core_1.getWorkspaceConfig(tree);
        Object.values(angularJson.projects)
            .map((o) => { var _a, _b, _c; return (_c = (_b = (_a = o === null || o === void 0 ? void 0 : o.architect) === null || _a === void 0 ? void 0 : _a.test) === null || _b === void 0 ? void 0 : _b.options) === null || _c === void 0 ? void 0 : _c.tsConfig; })
            .filter((path) => !!path)
            .forEach((path) => {
            var _a, _b;
            const json = schematics_core_1.readJsonInTree(tree, path);
            json.compilerOptions = Object.assign({}, json.compilerOptions);
            json.compilerOptions.types = ((_b = (_a = json.compilerOptions) === null || _a === void 0 ? void 0 : _a.types) !== null && _b !== void 0 ? _b : [])
                .filter((type) => !['jasmine'].some((jasmineType) => jasmineType === type))
                .concat('jest');
            tree.overwrite(path, JSON.stringify(json, null, 2) + '\n');
        });
        return tree;
    };
}
//# sourceMappingURL=index.js.map