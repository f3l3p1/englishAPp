"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseJsonAtPath = exports.getLatestNodeVersion = exports.safeFileDelete = exports.removePackageJsonDependency = exports.getAngularVersion = exports.Configs = void 0;
const core_1 = require("@angular-devkit/core");
const schematics_1 = require("@angular-devkit/schematics");
const dependencies_1 = require("./dependencies");
const json_utils_1 = require("./json-utils");
const https_1 = require("https");
var Configs;
(function (Configs) {
    Configs[Configs["JsonIndentLevel"] = 4] = "JsonIndentLevel";
})(Configs = exports.Configs || (exports.Configs = {}));
function getAngularVersion(tree) {
    const packageNode = dependencies_1.getPackageJsonDependency(tree, '@angular/core');
    const version = packageNode &&
        packageNode.version
            .replace(/[~^]/, '')
            .split('.')
            .find((x) => !!parseInt(x, 10));
    return version ? +version : 0;
}
exports.getAngularVersion = getAngularVersion;
// modified version from utility/dependencies/getPackageJsonDependency
function removePackageJsonDependency(tree, dependency) {
    const packageJsonAst = parseJsonAtPath(tree, dependencies_1.pkgJson.Path);
    const depsNode = json_utils_1.findPropertyInAstObject(packageJsonAst, dependency.type);
    const recorder = tree.beginUpdate(dependencies_1.pkgJson.Path);
    if (!depsNode) {
        // Haven't found the dependencies key.
        new schematics_1.SchematicsException('Could not find the package.json dependency');
    }
    else if (depsNode.kind === 'object') {
        const fullPackageString = depsNode.text.split('\n').filter((pkg) => {
            return pkg.includes(`"${dependency.name}"`);
        })[0];
        const commaDangle = fullPackageString && fullPackageString.trim().slice(-1) === ',' ? 1 : 0;
        const packageAst = depsNode.properties.find((node) => {
            return node.key.value.toLowerCase() === dependency.name.toLowerCase();
        });
        // TODO: does this work for the last dependency?
        const newLineIndentation = 5;
        if (packageAst) {
            // Package found, remove it.
            const end = packageAst.end.offset + commaDangle;
            recorder.remove(packageAst.key.start.offset, end - packageAst.start.offset + newLineIndentation);
        }
    }
    tree.commitUpdate(recorder);
}
exports.removePackageJsonDependency = removePackageJsonDependency;
function safeFileDelete(tree, path) {
    if (tree.exists(path)) {
        tree.delete(path);
        return true;
    }
    else {
        return false;
    }
}
exports.safeFileDelete = safeFileDelete;
/**
 * Attempt to retrieve the latest package version from NPM
 * Return an optional "latest" version in case of error
 * @param packageName
 */
function getLatestNodeVersion([packageName, ceiling]) {
    const DEFAULT_VERSION = 'latest';
    return new Promise((resolve) => {
        return https_1.get(`https://registry.npmjs.org/${packageName}`, (res) => {
            let rawData = '';
            res.on('data', (chunk) => (rawData += chunk));
            res.on('end', () => {
                try {
                    if (rawData) {
                        const response = JSON.parse(rawData);
                        const version = ceiling
                            ? Object.keys(response === null || response === void 0 ? void 0 : response.versions)
                                .filter((v) => !v.includes('-'))
                                .filter((v) => v.startsWith(ceiling))
                                .pop()
                            : (response && response['dist-tags']).latest || {};
                        resolve(buildPackage(packageName, version));
                    }
                    else {
                        resolve(buildPackage(packageName));
                    }
                }
                catch (e) {
                    console.log('ERROR', e);
                    resolve(buildPackage(packageName));
                }
            });
        }).on('error', () => resolve(buildPackage(packageName)));
    });
    function buildPackage(name, version = DEFAULT_VERSION) {
        return { name, version };
    }
}
exports.getLatestNodeVersion = getLatestNodeVersion;
function parseJsonAtPath(tree, path) {
    const buffer = tree.read(path);
    if (buffer === null) {
        throw new schematics_1.SchematicsException('Could not read package.json.');
    }
    const content = buffer.toString();
    const json = core_1.parseJsonAst(content, core_1.JsonParseMode.CommentsAllowed);
    if (json.kind != 'object') {
        throw new schematics_1.SchematicsException('Invalid package.json. Was expecting an object');
    }
    return json;
}
exports.parseJsonAtPath = parseJsonAtPath;
//# sourceMappingURL=util.js.map