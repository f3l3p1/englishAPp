"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@angular-devkit/core");
const path_1 = require("./path");
const json_1 = require("./json");
function updateWorkspaceInTree(callback) {
    return (host, context) => {
        const path = getWorkspacePath(host);
        host.overwrite(path, json_1.serializeJson(callback(json_1.readJsonInTree(host, path), context)));
        return host;
    };
}
exports.updateWorkspaceInTree = updateWorkspaceInTree;
function getProjectConfig(host, name) {
    var _a;
    const workspaceJson = json_1.readJsonInTree(host, getWorkspacePath(host));
    const projectConfig = (_a = workspaceJson) === null || _a === void 0 ? void 0 : _a.projects[name];
    if (!projectConfig) {
        throw new Error(`Cannot find project '${name}'`);
    }
    else {
        return projectConfig;
    }
}
exports.getProjectConfig = getProjectConfig;
function getWorkspaceConfig(host) {
    const workspaceJson = json_1.readJsonInTree(host, getWorkspacePath(host));
    if (!workspaceJson) {
        throw new Error(`Cannot find workspace config (angular.json)`);
    }
    else {
        return workspaceJson;
    }
}
exports.getWorkspaceConfig = getWorkspaceConfig;
function createHost(tree) {
    return {
        readFile(path) {
            return __awaiter(this, void 0, void 0, function* () {
                const data = tree.read(path);
                if (!data) {
                    throw new Error('File not found.');
                }
                return core_1.virtualFs.fileBufferToString(data);
            });
        },
        writeFile(path, data) {
            return __awaiter(this, void 0, void 0, function* () {
                return tree.overwrite(path, data);
            });
        },
        isDirectory(path) {
            return __awaiter(this, void 0, void 0, function* () {
                // approximate a directory check
                return !tree.exists(path) && tree.getDir(path).subfiles.length > 0;
            });
        },
        isFile(path) {
            return __awaiter(this, void 0, void 0, function* () {
                return tree.exists(path);
            });
        },
    };
}
function getWorkspacePath(host) {
    const possibleFiles = ['/workspace.json', '/angular.json', '/.angular.json'];
    return possibleFiles.filter((path) => host.exists(path))[0];
}
exports.getWorkspacePath = getWorkspacePath;
function getWorkspace(tree, path = '/') {
    return __awaiter(this, void 0, void 0, function* () {
        const host = createHost(tree);
        const { workspace } = yield core_1.workspaces.readWorkspace(path, host);
        return workspace;
    });
}
exports.getWorkspace = getWorkspace;
function determineProject(tree, projectName) {
    return __awaiter(this, void 0, void 0, function* () {
        const ws = yield getWorkspace(tree);
        const name = projectName || ws.extensions.defaultProject;
        const project = ws.projects.get(name);
        if (!name || project === undefined) {
            throw new Error('No project found in workspace');
        }
        return {
            projectName: name,
            projectRoot: path_1.parsePath(project.root).path,
            projectSourceRoot: path_1.parsePath(project.sourceRoot || '').path,
            projectConfig: getProjectConfig(tree, name),
            angularConfig: getWorkspaceConfig(tree),
        };
    });
}
exports.determineProject = determineProject;
//# sourceMappingURL=workspace.js.map