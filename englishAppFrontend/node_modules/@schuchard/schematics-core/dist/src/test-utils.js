"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@angular-devkit/schematics/testing");
function getWorkspaceTree(opt) {
    var _a, _b, _c, _d;
    return __awaiter(this, void 0, void 0, function* () {
        const ngRunner = new testing_1.SchematicTestRunner('@schematics/angular', '');
        const workspaceOptions = Object.assign({ name: 'workspace', newProjectRoot: 'projects', version: '8.0.0', defaultProject: ((_a = opt) === null || _a === void 0 ? void 0 : _a.appName) || 'bar' }, (_b = opt) === null || _b === void 0 ? void 0 : _b.workspaceOptions);
        const appOptions = Object.assign({ name: ((_c = opt) === null || _c === void 0 ? void 0 : _c.appName) || 'bar', inlineTemplate: false, routing: false, skipTests: false, skipPackageJson: false }, (_d = opt) === null || _d === void 0 ? void 0 : _d.appOptions);
        let appTree = yield ngRunner.runSchematicAsync('workspace', workspaceOptions).toPromise();
        appTree = yield ngRunner.runSchematicAsync('application', appOptions, appTree).toPromise();
        return appTree;
    });
}
exports.getWorkspaceTree = getWorkspaceTree;
function getApplicationTree(opt) {
    var _a, _b;
    return __awaiter(this, void 0, void 0, function* () {
        const schematicRunner = new testing_1.SchematicTestRunner('@schematics/angular', '');
        const defaultOptions = Object.assign({ name: 'foo', directory: 'bar', version: '6.0.0' }, (_a = opt) === null || _a === void 0 ? void 0 : _a.appOptions);
        return yield schematicRunner
            .runSchematicAsync(((_b = opt) === null || _b === void 0 ? void 0 : _b.command) || 'ng-new', defaultOptions)
            .toPromise();
    });
}
exports.getApplicationTree = getApplicationTree;
function runSchematic(opt) {
    var _a, _b, _c, _d;
    return __awaiter(this, void 0, void 0, function* () {
        const schematicRunner = new testing_1.SchematicTestRunner(name, require.resolve(((_a = opt) === null || _a === void 0 ? void 0 : _a.collectionPath) || '../collection.json'));
        return yield schematicRunner
            .runSchematicAsync(((_b = opt) === null || _b === void 0 ? void 0 : _b.command) || 'ng-add', (_c = opt) === null || _c === void 0 ? void 0 : _c.schematicOptions, ((_d = opt) === null || _d === void 0 ? void 0 : _d.tree) || (yield getWorkspaceTree()))
            .toPromise();
    });
}
exports.runSchematic = runSchematic;
//# sourceMappingURL=test-utils.js.map