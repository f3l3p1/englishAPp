"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const inquirer = require("inquirer");
const fuzzy = require("fuzzy");
const strip_ansi_1 = require("strip-ansi");
inquirer.registerPrompt('autocomplete', require('inquirer-autocomplete-prompt'));
function autoCompleteDecoratorFiles(choices) {
    return autoCompletePrompt(fuzzySearch({ choices }), {
        message: 'Select a Component, Pipe, Directive, or Service',
    });
}
exports.autoCompleteDecoratorFiles = autoCompleteDecoratorFiles;
function fuzzySearch({ choices }) {
    return (input) => __awaiter(this, void 0, void 0, function* () {
        input = input || '';
        const results = yield fuzzy
            .filter(input, choices, {
            extract: (el) => el.displayString,
        })
            .map(function ({ original, string }) {
            return {
                value: original,
                name: strip_ansi_1.default(string),
                short: strip_ansi_1.default(string),
            };
        });
        return results || [];
    });
}
exports.fuzzySearch = fuzzySearch;
function autoCompletePrompt(source, { message, // prompt for selection
key = 'result', // selection will be under this key
pageSize = 5, suggestOnly = false, }) {
    return inquirer
        .prompt([
        {
            type: 'autocomplete',
            name: key,
            suggestOnly,
            message,
            source,
            pageSize,
        },
    ])
        .then((answers) => {
        console.log('autoCompletePrompt: ', JSON.stringify(answers, null, 2));
        return answers[key];
    });
}
exports.autoCompletePrompt = autoCompletePrompt;
//# sourceMappingURL=fuzzy.js.map