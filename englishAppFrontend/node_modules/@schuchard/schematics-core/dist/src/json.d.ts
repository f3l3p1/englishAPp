import { Tree, SchematicContext, Rule } from '@angular-devkit/schematics';
import { JsonObject } from '@angular-devkit/core';
import { PkgJson, NodeDependencyType } from './npm';
import { Observable } from 'rxjs';
export interface PackageJsonDep {
    name: string;
    version?: string;
}
/**
 * Serialize JSON.
 */
export declare function serializeJson(json: any): string;
export declare function parseJsonAtPath(tree: Tree, path: string): JsonObject;
/**
 * Read a JSON file.
 */
export declare function readJsonInTree<T = any>(host: Tree, path: string): T;
/**
 * This method is specifically for updating JSON in a Tree
 * @param path Path of JSON file in the Tree
 * @param callback Manipulation of the JSON data
 * @returns A rule which updates a JSON file file in a Tree
 */
export declare function updateJsonInTree<T = any, O = T>(path: string, callback: (json: T, context: SchematicContext) => O): Rule;
/**
 * Combine two JSON objects.
 * Recursively merges own and inherited enumerable string keyed properties of source objects into the destination object.
 */
export declare function mergeJson(jsonA: JsonObject, JsonB: JsonObject): JsonObject;
/**
 * Handle Arrays by concatenating source values to the destination.
 */
export declare function mergeCustomizer(objValue: JsonObject, srcValue: JsonObject): any[] | undefined;
/**
 * Combine two JSON objects and update the tree.
 */
export declare function mergeJsonTree(tree: Tree, path: string, jsonA: JsonObject, JsonB: JsonObject): Tree;
/**
 * Update the package.json with a mergeObject that defines the differences.
 */
export declare function mergePackageJson(tree: Tree, mergeObject: JsonObject, path?: PkgJson): Tree;
/**
 * Add a package json dependency (dev, devDep) setting version as the from npm.
 */
export declare function addPackageJsonDep(tree: Tree, type: NodeDependencyType, deps: PackageJsonDep[], path?: PkgJson, context?: SchematicContext): Observable<Tree>;
